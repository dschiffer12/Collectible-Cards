{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from 'axios';\nimport { getCardInfoWithDetection } from \"./cardGameAPIs\";\nvar GOOGLE_CLOUD_VISION_API_KEY = 'AIzaSyBTumhFlzjb0NT2WxHBDIs3svJ4Laacsgs';\nexport var detectCards = function () {\n  var _ref = _asyncToGenerator(function* (imageBase64) {\n    try {\n      var _response$data$respon, _response$data$respon2;\n      var response = yield axios.post(`https://vision.googleapis.com/v1/images:annotate?key=${GOOGLE_CLOUD_VISION_API_KEY}`, {\n        requests: [{\n          image: {\n            content: imageBase64\n          },\n          features: [{\n            type: 'TEXT_DETECTION',\n            maxResults: 50\n          }, {\n            type: 'OBJECT_LOCALIZATION',\n            maxResults: 10\n          }]\n        }]\n      });\n      var textAnnotations = ((_response$data$respon = response.data.responses[0]) == null ? void 0 : _response$data$respon.textAnnotations) || [];\n      var objectAnnotations = ((_response$data$respon2 = response.data.responses[0]) == null ? void 0 : _response$data$respon2.localizedObjectAnnotations) || [];\n      var potentialCardNames = extractCardNames(textAnnotations);\n      var cardObjects = objectAnnotations.filter(function (obj) {\n        return obj.name === 'Rectangle' || obj.name === 'Card';\n      });\n      var detectedCards = [];\n      for (var cardName of potentialCardNames) {\n        try {\n          var cardInfo = yield getCardInfoWithDetection(cardName);\n          if (cardInfo) {\n            detectedCards.push({\n              id: generateId(),\n              name: cardInfo.name,\n              set: cardInfo.set,\n              price: cardInfo.price,\n              image: cardInfo.imageUrl,\n              confidence: 0.85,\n              boundingBox: {\n                x: 0,\n                y: 0,\n                width: 100,\n                height: 140\n              }\n            });\n          }\n        } catch (error) {\n          console.error(`Error getting info for card ${cardName}:`, error);\n        }\n      }\n      return detectedCards;\n    } catch (error) {\n      console.error('Error detecting cards:', error);\n      throw new Error('Failed to detect cards in image');\n    }\n  });\n  return function detectCards(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar extractCardNames = function extractCardNames(textAnnotations) {\n  var potentialNames = [];\n  if (textAnnotations.length === 0) return potentialNames;\n  var fullText = textAnnotations[0].description;\n  var lines = fullText.split('\\n');\n  for (var line of lines) {\n    var trimmedLine = line.trim();\n    if (trimmedLine.length < 3 || trimmedLine.length > 50) continue;\n    if (/^\\d+$/.test(trimmedLine)) continue;\n    if (/^[A-Z\\s]+$/.test(trimmedLine) && trimmedLine.length < 10) continue;\n    if (/^[A-Z][a-z]+/.test(trimmedLine) || /^[A-Z][a-z]+\\s+[A-Z][a-z]+/.test(trimmedLine) || /^[A-Z][a-z]+\\s+[A-Z][a-z]+\\s+[A-Z][a-z]+/.test(trimmedLine)) {\n      potentialNames.push(trimmedLine);\n    }\n  }\n  return potentialNames.slice(0, 5);\n};\nexport { getCardInfo } from \"./cardGameAPIs\";\nexport var recognizeCard = function () {\n  var _ref2 = _asyncToGenerator(function* (imageBase64) {\n    try {\n      var _response$data$respon3, _response$data$respon4;\n      var response = yield axios.post(`https://vision.googleapis.com/v1/images:annotate?key=${GOOGLE_CLOUD_VISION_API_KEY}`, {\n        requests: [{\n          image: {\n            content: imageBase64\n          },\n          features: [{\n            type: 'WEB_DETECTION',\n            maxResults: 5\n          }, {\n            type: 'TEXT_DETECTION',\n            maxResults: 10\n          }]\n        }]\n      });\n      var webDetection = (_response$data$respon3 = response.data.responses[0]) == null ? void 0 : _response$data$respon3.webDetection;\n      var textAnnotations = ((_response$data$respon4 = response.data.responses[0]) == null ? void 0 : _response$data$respon4.textAnnotations) || [];\n      var cardName = extractBestCardName(textAnnotations, webDetection);\n      if (cardName) {\n        var cardInfo = yield getCardInfoWithDetection(cardName);\n        if (cardInfo) {\n          return {\n            id: generateId(),\n            name: cardInfo.name,\n            set: cardInfo.set,\n            price: cardInfo.price,\n            image: cardInfo.imageUrl,\n            confidence: 0.9,\n            boundingBox: {\n              x: 0,\n              y: 0,\n              width: 100,\n              height: 140\n            }\n          };\n        }\n      }\n      return null;\n    } catch (error) {\n      console.error('Error recognizing card:', error);\n      throw new Error('Failed to recognize card');\n    }\n  });\n  return function recognizeCard(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar extractBestCardName = function extractBestCardName(textAnnotations, webDetection) {\n  if (webDetection != null && webDetection.webEntities) {\n    for (var entity of webDetection.webEntities) {\n      if (entity.description && entity.score > 0.7) {\n        if (isLikelyCardName(entity.description)) {\n          return entity.description;\n        }\n      }\n    }\n  }\n  if (textAnnotations.length > 0) {\n    var lines = textAnnotations[0].description.split('\\n');\n    for (var line of lines) {\n      var trimmedLine = line.trim();\n      if (isLikelyCardName(trimmedLine)) {\n        return trimmedLine;\n      }\n    }\n  }\n  return null;\n};\nvar isLikelyCardName = function isLikelyCardName(text) {\n  if (text.length < 3 || text.length > 50) return false;\n  var cardNamePatterns = [/^[A-Z][a-z]+(\\s+[A-Z][a-z]+)*$/, /^[A-Z][a-z]+(\\s+[A-Z][a-z]+)*\\s+[A-Z][a-z]+$/];\n  return cardNamePatterns.some(function (pattern) {\n    return pattern.test(text);\n  });\n};\nvar generateId = function generateId() {\n  return Math.random().toString(36).substr(2, 9);\n};\nexport var detectCardsMock = function () {\n  var _ref3 = _asyncToGenerator(function* (imageBase64) {\n    yield new Promise(function (resolve) {\n      return setTimeout(resolve, 2000);\n    });\n    return [{\n      id: '1',\n      name: 'Black Lotus',\n      set: 'Alpha',\n      price: 50000,\n      image: 'https://c1.scryfall.com/file/scryfall-cards/normal/front/0/0/000b9c4b-e2f5-4e61-91c8-4b556896d0f2.jpg?1562944156',\n      confidence: 0.95,\n      boundingBox: {\n        x: 0,\n        y: 0,\n        width: 100,\n        height: 140\n      }\n    }, {\n      id: '2',\n      name: 'Lightning Bolt',\n      set: 'Beta',\n      price: 150,\n      image: 'https://c1.scryfall.com/file/scryfall-cards/normal/front/0/0/000b9c4b-e2f5-4e61-91c8-4b556896d0f3.jpg?1562944156',\n      confidence: 0.88,\n      boundingBox: {\n        x: 120,\n        y: 0,\n        width: 100,\n        height: 140\n      }\n    }, {\n      id: '3',\n      name: 'Charizard',\n      set: 'Base Set',\n      price: 350,\n      image: 'https://images.pokemontcg.io/base1/4.png',\n      confidence: 0.92,\n      boundingBox: {\n        x: 240,\n        y: 0,\n        width: 100,\n        height: 140\n      }\n    }, {\n      id: '4',\n      name: 'Babe Ruth',\n      set: 'Topps 1952',\n      price: 5000000,\n      image: 'https://example.com/babe-ruth-1952.jpg',\n      confidence: 0.94,\n      boundingBox: {\n        x: 360,\n        y: 0,\n        width: 100,\n        height: 140\n      }\n    }, {\n      id: '5',\n      name: 'Michael Jordan',\n      set: 'Fleer 1986',\n      price: 1500000,\n      image: 'https://example.com/michael-jordan-1986.jpg',\n      confidence: 0.91,\n      boundingBox: {\n        x: 480,\n        y: 0,\n        width: 100,\n        height: 140\n      }\n    }, {\n      id: '6',\n      name: 'Spider-Man',\n      set: 'Marvel Comics',\n      price: 250,\n      image: 'https://example.com/spider-man-card.jpg',\n      confidence: 0.89,\n      boundingBox: {\n        x: 600,\n        y: 0,\n        width: 100,\n        height: 140\n      }\n    }];\n  });\n  return function detectCardsMock(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["axios","getCardInfoWithDetection","GOOGLE_CLOUD_VISION_API_KEY","detectCards","_ref","_asyncToGenerator","imageBase64","_response$data$respon","_response$data$respon2","response","post","requests","image","content","features","type","maxResults","textAnnotations","data","responses","objectAnnotations","localizedObjectAnnotations","potentialCardNames","extractCardNames","cardObjects","filter","obj","name","detectedCards","cardName","cardInfo","push","id","generateId","set","price","imageUrl","confidence","boundingBox","x","y","width","height","error","console","Error","_x","apply","arguments","potentialNames","length","fullText","description","lines","split","line","trimmedLine","trim","test","slice","getCardInfo","recognizeCard","_ref2","_response$data$respon3","_response$data$respon4","webDetection","extractBestCardName","_x2","webEntities","entity","score","isLikelyCardName","text","cardNamePatterns","some","pattern","Math","random","toString","substr","detectCardsMock","_ref3","Promise","resolve","setTimeout","_x3"],"sources":["C:/Users/dschi/OneDrive/Desktop/collectible/src/services/aiService.ts"],"sourcesContent":["import axios from 'axios';\nimport { getCardInfoWithDetection, CardInfo } from './cardGameAPIs';\n\n// Configuration - Replace with your actual API keys\nconst GOOGLE_CLOUD_VISION_API_KEY = 'AIzaSyBTumhFlzjb0NT2WxHBDIs3svJ4Laacsgs';\n\ninterface DetectedCard {\n  id: string;\n  name: string;\n  set: string;\n  price: number;\n  image: string;\n  confidence: number;\n  boundingBox: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n}\n\n// Google Cloud Vision API for text extraction and object detection\nexport const detectCards = async (imageBase64: string): Promise<DetectedCard[]> => {\n  try {\n    const response = await axios.post(\n      `https://vision.googleapis.com/v1/images:annotate?key=${GOOGLE_CLOUD_VISION_API_KEY}`,\n      {\n        requests: [\n          {\n            image: {\n              content: imageBase64,\n            },\n            features: [\n              {\n                type: 'TEXT_DETECTION',\n                maxResults: 50,\n              },\n              {\n                type: 'OBJECT_LOCALIZATION',\n                maxResults: 10,\n              },\n            ],\n          },\n        ],\n      }\n    );\n\n    const textAnnotations = response.data.responses[0]?.textAnnotations || [];\n    const objectAnnotations = response.data.responses[0]?.localizedObjectAnnotations || [];\n\n    // Extract potential card names from text\n    const potentialCardNames = extractCardNames(textAnnotations);\n    \n    // Find card-like objects (rectangular shapes)\n    const cardObjects = objectAnnotations.filter((obj: any) => \n      obj.name === 'Rectangle' || obj.name === 'Card'\n    );\n\n    const detectedCards: DetectedCard[] = [];\n\n    // For each potential card name, try to get card information\n    for (const cardName of potentialCardNames) {\n      try {\n        const cardInfo = await getCardInfoWithDetection(cardName);\n        if (cardInfo) {\n          detectedCards.push({\n            id: generateId(),\n            name: cardInfo.name,\n            set: cardInfo.set,\n            price: cardInfo.price,\n            image: cardInfo.imageUrl,\n            confidence: 0.85, // Default confidence\n            boundingBox: {\n              x: 0,\n              y: 0,\n              width: 100,\n              height: 140,\n            },\n          });\n        }\n      } catch (error) {\n        console.error(`Error getting info for card ${cardName}:`, error);\n      }\n    }\n\n    return detectedCards;\n  } catch (error) {\n    console.error('Error detecting cards:', error);\n    throw new Error('Failed to detect cards in image');\n  }\n};\n\n// Extract potential card names from OCR text\nconst extractCardNames = (textAnnotations: any[]): string[] => {\n  const potentialNames: string[] = [];\n  \n  if (textAnnotations.length === 0) return potentialNames;\n\n  // Get all text content\n  const fullText = textAnnotations[0].description;\n  const lines = fullText.split('\\n');\n\n  // Look for patterns that might be card names\n  for (const line of lines) {\n    const trimmedLine = line.trim();\n    \n    // Skip empty lines, numbers, and very short text\n    if (trimmedLine.length < 3 || trimmedLine.length > 50) continue;\n    \n    // Skip lines that are likely not card names\n    if (/^\\d+$/.test(trimmedLine)) continue; // Just numbers\n    if (/^[A-Z\\s]+$/.test(trimmedLine) && trimmedLine.length < 10) continue; // All caps short text\n    \n    // Look for patterns that suggest card names\n    if (\n      /^[A-Z][a-z]+/.test(trimmedLine) || // Starts with capital letter\n      /^[A-Z][a-z]+\\s+[A-Z][a-z]+/.test(trimmedLine) || // Multiple capitalized words\n      /^[A-Z][a-z]+\\s+[A-Z][a-z]+\\s+[A-Z][a-z]+/.test(trimmedLine) // Three or more capitalized words\n    ) {\n      potentialNames.push(trimmedLine);\n    }\n  }\n\n  return potentialNames.slice(0, 5); // Limit to 5 potential names\n};\n\n// Re-export the getCardInfo function from cardGameAPIs for backward compatibility\nexport { getCardInfo } from './cardGameAPIs';\n\n// Recognize a specific card from an image\nexport const recognizeCard = async (imageBase64: string): Promise<DetectedCard | null> => {\n  try {\n    // Use Google Cloud Vision API for more detailed analysis\n    const response = await axios.post(\n      `https://vision.googleapis.com/v1/images:annotate?key=${GOOGLE_CLOUD_VISION_API_KEY}`,\n      {\n        requests: [\n          {\n            image: {\n              content: imageBase64,\n            },\n            features: [\n              {\n                type: 'WEB_DETECTION',\n                maxResults: 5,\n              },\n              {\n                type: 'TEXT_DETECTION',\n                maxResults: 10,\n              },\n            ],\n          },\n        ],\n      }\n    );\n\n    const webDetection = response.data.responses[0]?.webDetection;\n    const textAnnotations = response.data.responses[0]?.textAnnotations || [];\n\n    // Extract text for card name\n    const cardName = extractBestCardName(textAnnotations, webDetection);\n    \n    if (cardName) {\n      const cardInfo = await getCardInfoWithDetection(cardName);\n      if (cardInfo) {\n        return {\n          id: generateId(),\n          name: cardInfo.name,\n          set: cardInfo.set,\n          price: cardInfo.price,\n          image: cardInfo.imageUrl,\n          confidence: 0.9,\n          boundingBox: {\n            x: 0,\n            y: 0,\n            width: 100,\n            height: 140,\n          },\n        };\n      }\n    }\n\n    return null;\n  } catch (error) {\n    console.error('Error recognizing card:', error);\n    throw new Error('Failed to recognize card');\n  }\n};\n\n// Extract the best card name from OCR and web detection\nconst extractBestCardName = (textAnnotations: any[], webDetection: any): string | null => {\n  // First, try to find card names in web detection\n  if (webDetection?.webEntities) {\n    for (const entity of webDetection.webEntities) {\n      if (entity.description && entity.score > 0.7) {\n        // Check if it looks like a card name\n        if (isLikelyCardName(entity.description)) {\n          return entity.description;\n        }\n      }\n    }\n  }\n\n  // Fall back to OCR text\n  if (textAnnotations.length > 0) {\n    const lines = textAnnotations[0].description.split('\\n');\n    for (const line of lines) {\n      const trimmedLine = line.trim();\n      if (isLikelyCardName(trimmedLine)) {\n        return trimmedLine;\n      }\n    }\n  }\n\n  return null;\n};\n\n// Check if a string is likely to be a card name\nconst isLikelyCardName = (text: string): boolean => {\n  if (text.length < 3 || text.length > 50) return false;\n  \n  // Common card name patterns\n  const cardNamePatterns = [\n    /^[A-Z][a-z]+(\\s+[A-Z][a-z]+)*$/, // Multiple capitalized words\n    /^[A-Z][a-z]+(\\s+[A-Z][a-z]+)*\\s+[A-Z][a-z]+$/, // At least 3 capitalized words\n  ];\n\n  return cardNamePatterns.some(pattern => pattern.test(text));\n};\n\n// Generate a unique ID\nconst generateId = (): string => {\n  return Math.random().toString(36).substr(2, 9);\n};\n\n// Mock function for development/testing without API keys\nexport const detectCardsMock = async (imageBase64: string): Promise<DetectedCard[]> => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 2000));\n  \n  return [\n    {\n      id: '1',\n      name: 'Black Lotus',\n      set: 'Alpha',\n      price: 50000,\n      image: 'https://c1.scryfall.com/file/scryfall-cards/normal/front/0/0/000b9c4b-e2f5-4e61-91c8-4b556896d0f2.jpg?1562944156',\n      confidence: 0.95,\n      boundingBox: { x: 0, y: 0, width: 100, height: 140 },\n    },\n    {\n      id: '2',\n      name: 'Lightning Bolt',\n      set: 'Beta',\n      price: 150,\n      image: 'https://c1.scryfall.com/file/scryfall-cards/normal/front/0/0/000b9c4b-e2f5-4e61-91c8-4b556896d0f3.jpg?1562944156',\n      confidence: 0.88,\n      boundingBox: { x: 120, y: 0, width: 100, height: 140 },\n    },\n    {\n      id: '3',\n      name: 'Charizard',\n      set: 'Base Set',\n      price: 350,\n      image: 'https://images.pokemontcg.io/base1/4.png',\n      confidence: 0.92,\n      boundingBox: { x: 240, y: 0, width: 100, height: 140 },\n    },\n    {\n      id: '4',\n      name: 'Babe Ruth',\n      set: 'Topps 1952',\n      price: 5000000,\n      image: 'https://example.com/babe-ruth-1952.jpg',\n      confidence: 0.94,\n      boundingBox: { x: 360, y: 0, width: 100, height: 140 },\n    },\n    {\n      id: '5',\n      name: 'Michael Jordan',\n      set: 'Fleer 1986',\n      price: 1500000,\n      image: 'https://example.com/michael-jordan-1986.jpg',\n      confidence: 0.91,\n      boundingBox: { x: 480, y: 0, width: 100, height: 140 },\n    },\n    {\n      id: '6',\n      name: 'Spider-Man',\n      set: 'Marvel Comics',\n      price: 250,\n      image: 'https://example.com/spider-man-card.jpg',\n      confidence: 0.89,\n      boundingBox: { x: 600, y: 0, width: 100, height: 140 },\n    },\n  ];\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}