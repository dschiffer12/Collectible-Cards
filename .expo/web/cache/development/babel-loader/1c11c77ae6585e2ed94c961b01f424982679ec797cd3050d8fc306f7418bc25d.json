{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _excluded = [\"name\", \"size\", \"color\", \"style\", \"children\", \"allowFontScaling\", \"innerRef\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIconSet = createIconSet;\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native-web/dist/index\");\nvar _createIconSourceCache = _interopRequireDefault(require(\"./create-icon-source-cache.js\"));\nvar _defaults = require(\"./defaults.js\");\nvar _dynamicFontLoading = require(\"./dynamicLoading/dynamic-font-loading.js\");\nvar _dynamicLoadingSetting = require(\"./dynamicLoading/dynamic-loading-setting.js\");\nvar _getImageSource = require(\"./get-image-source.js\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nfunction _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    default: e\n  };\n}\nfunction _getRequireWildcardCache(e) {\n  if (\"function\" != typeof WeakMap) return null;\n  var r = new WeakMap(),\n    t = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {\n    return e ? t : r;\n  })(e);\n}\nfunction _interopRequireWildcard(e, r) {\n  if (!r && e && e.__esModule) return e;\n  if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n    default: e\n  };\n  var t = _getRequireWildcardCache(r);\n  if (t && t.has(e)) return t.get(e);\n  var n = {\n      __proto__: null\n    },\n    a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) {\n    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n  }\n  return n.default = e, t && t.set(e, n), n;\n}\nfunction createIconSet(glyphMap, postScriptNameOrOptions, fontFileNameParam, fontStyleParam) {\n  var _ref = typeof postScriptNameOrOptions === 'string' ? {\n      postScriptName: postScriptNameOrOptions,\n      fontFileName: fontFileNameParam,\n      fontStyle: fontStyleParam\n    } : postScriptNameOrOptions,\n    postScriptName = _ref.postScriptName,\n    fontFileName = _ref.fontFileName,\n    fontStyle = _ref.fontStyle;\n  var fontBasename = fontFileName ? fontFileName.replace(/\\.(otf|ttf)$/, '') : postScriptName;\n  var fontReference = _reactNative.Platform.select({\n    windows: `/Assets/${fontFileName}#${postScriptName}`,\n    android: fontBasename,\n    default: postScriptName\n  });\n  var styleOverrides = {\n    fontFamily: fontReference,\n    fontWeight: 'normal',\n    fontStyle: 'normal'\n  };\n  var resolveGlyph = function resolveGlyph(name) {\n    var glyph = glyphMap[name];\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n    return '?';\n  };\n  var Icon = function Icon(_ref2) {\n    var name = _ref2.name,\n      _ref2$size = _ref2.size,\n      size = _ref2$size === void 0 ? _defaults.DEFAULT_ICON_SIZE : _ref2$size,\n      _ref2$color = _ref2.color,\n      color = _ref2$color === void 0 ? _defaults.DEFAULT_ICON_COLOR : _ref2$color,\n      style = _ref2.style,\n      children = _ref2.children,\n      _ref2$allowFontScalin = _ref2.allowFontScaling,\n      allowFontScaling = _ref2$allowFontScalin === void 0 ? false : _ref2$allowFontScalin,\n      innerRef = _ref2.innerRef,\n      props = _objectWithoutProperties(_ref2, _excluded);\n    var _react$default$useSta = _react.default.useState((0, _dynamicLoadingSetting.isDynamicLoadingEnabled)() ? _dynamicFontLoading.dynamicLoader.isLoaded(fontReference) : true),\n      _react$default$useSta2 = _slicedToArray(_react$default$useSta, 2),\n      isFontLoaded = _react$default$useSta2[0],\n      setIsFontLoaded = _react$default$useSta2[1];\n    var glyph = isFontLoaded && name ? resolveGlyph(name) : '';\n    (0, _react.useEffect)(function () {\n      var isMounted = true;\n      if (!isFontLoaded && typeof postScriptNameOrOptions === 'object' && typeof postScriptNameOrOptions.fontSource !== 'undefined') {\n        _dynamicFontLoading.dynamicLoader.loadFontAsync(fontReference, postScriptNameOrOptions.fontSource).finally(function () {\n          if (isMounted) {\n            setIsFontLoaded(true);\n          }\n        });\n      }\n      return function () {\n        isMounted = false;\n      };\n    }, []);\n    var styleDefaults = {\n      fontSize: size,\n      color: color\n    };\n    var newProps = _objectSpread(_objectSpread({}, props), {}, {\n      style: [styleDefaults, style, styleOverrides, fontStyle || {}],\n      allowFontScaling: allowFontScaling\n    });\n    return (0, _jsxRuntime.jsxs)(_reactNative.Text, _objectSpread(_objectSpread({\n      ref: innerRef,\n      selectable: false\n    }, newProps), {}, {\n      children: [glyph, children]\n    }));\n  };\n  var WrappedIcon = (0, _react.forwardRef)(function (props, ref) {\n    return (0, _jsxRuntime.jsx)(Icon, _objectSpread({\n      innerRef: ref\n    }, props));\n  });\n  WrappedIcon.displayName = `Icon(${postScriptName})`;\n  var imageSourceCache = (0, _createIconSourceCache.default)();\n  var getImageSource = function () {\n    var _ref3 = _asyncToGenerator(function* (name, size, color) {\n      if (typeof postScriptNameOrOptions === 'object' && typeof postScriptNameOrOptions.fontSource !== 'undefined') {\n        yield _dynamicFontLoading.dynamicLoader.loadFontAsync(fontReference, postScriptNameOrOptions.fontSource);\n      }\n      return (0, _getImageSource.getImageSource)(imageSourceCache, fontReference, resolveGlyph(name), size, color);\n    });\n    return function getImageSource(_x, _x2, _x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var getImageSourceSync = function getImageSourceSync(name, size, color) {\n    return (0, _getImageSource.getImageSourceSync)(imageSourceCache, fontReference, resolveGlyph(name), size, color);\n  };\n  var IconNamespace = Object.assign(WrappedIcon, {\n    getImageSource: getImageSource,\n    getImageSourceSync: getImageSourceSync\n  });\n  return IconNamespace;\n}","map":{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_createIconSourceCache","_interopRequireDefault","_defaults","_dynamicFontLoading","_dynamicLoadingSetting","_getImageSource","_jsxRuntime","e","__esModule","default","_getRequireWildcardCache","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","createIconSet","glyphMap","postScriptNameOrOptions","fontFileNameParam","fontStyleParam","_ref","postScriptName","fontFileName","fontStyle","fontBasename","replace","fontReference","Platform","select","windows","android","styleOverrides","fontFamily","fontWeight","resolveGlyph","name","glyph","String","fromCodePoint","Icon","_ref2","_ref2$size","size","DEFAULT_ICON_SIZE","_ref2$color","color","DEFAULT_ICON_COLOR","style","children","_ref2$allowFontScalin","allowFontScaling","innerRef","props","_objectWithoutProperties","_excluded","_react$default$useSta","useState","isDynamicLoadingEnabled","dynamicLoader","isLoaded","_react$default$useSta2","_slicedToArray","isFontLoaded","setIsFontLoaded","useEffect","isMounted","fontSource","loadFontAsync","finally","styleDefaults","fontSize","newProps","_objectSpread","jsxs","Text","ref","selectable","WrappedIcon","forwardRef","jsx","displayName","imageSourceCache","getImageSource","_ref3","_asyncToGenerator","_x","_x2","_x3","apply","arguments","getImageSourceSync","IconNamespace","assign"],"sources":["C:\\Users\\dschi\\OneDrive\\Desktop\\collectible\\node_modules\\@react-native-vector-icons\\common\\src\\create-icon-set.tsx"],"sourcesContent":["// eslint-disable-next-line import/no-extraneous-dependencies\nimport React, { forwardRef, type Ref, useEffect } from 'react';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Platform, Text, type TextProps, type TextStyle } from 'react-native';\n\nimport createIconSourceCache from './create-icon-source-cache';\nimport { DEFAULT_ICON_COLOR, DEFAULT_ICON_SIZE } from './defaults';\nimport { dynamicLoader } from './dynamicLoading/dynamic-font-loading';\nimport { isDynamicLoadingEnabled } from './dynamicLoading/dynamic-loading-setting';\nimport type { FontSource } from './dynamicLoading/types';\nimport { getImageSource as getImageSourceImpl, getImageSourceSync as getImageSourceSyncImpl } from './get-image-source';\n\ntype ValueData = { uri: string; scale: number };\ntype GetImageSourceSyncIconFunc<GM> = (name: GM, size?: number, color?: TextStyle['color']) => ValueData | undefined;\ntype GetImageSourceIconFunc<GM> = (\n  name: GM,\n  size?: number,\n  color?: TextStyle['color'],\n) => Promise<ValueData | undefined>;\n\nexport type IconProps<T> = TextProps & {\n  name: T;\n  size?: number;\n  color?: TextStyle['color'];\n  innerRef?: Ref<Text>;\n};\n\nexport type IconComponent<GM extends Record<string, number>> = React.FC<\n  TextProps & {\n    name: keyof GM;\n    size?: number;\n    color?: TextStyle['color'];\n    innerRef?: Ref<Text>;\n  } & React.RefAttributes<Text>\n> & {\n  getImageSource: GetImageSourceIconFunc<keyof GM>;\n  getImageSourceSync: GetImageSourceSyncIconFunc<keyof GM>;\n};\n\nexport type CreateIconSetOptions = {\n  postScriptName: string;\n  fontFileName: string;\n  fontSource?: FontSource;\n  fontStyle?: TextProps['style'];\n};\n\nexport function createIconSet<GM extends Record<string, number>>(\n  glyphMap: GM,\n  postScriptName: string,\n  fontFileName: string,\n  fontStyle?: TextProps['style'],\n): IconComponent<GM>;\nexport function createIconSet<GM extends Record<string, number>>(\n  glyphMap: GM,\n  options: CreateIconSetOptions,\n): IconComponent<GM>;\nexport function createIconSet<GM extends Record<string, number>>(\n  glyphMap: GM,\n  postScriptNameOrOptions: string | CreateIconSetOptions,\n  fontFileNameParam?: string,\n  fontStyleParam?: TextProps['style'],\n): IconComponent<GM> {\n  const { postScriptName, fontFileName, fontStyle } =\n    typeof postScriptNameOrOptions === 'string'\n      ? {\n          postScriptName: postScriptNameOrOptions,\n          fontFileName: fontFileNameParam,\n          fontStyle: fontStyleParam,\n        }\n      : postScriptNameOrOptions;\n\n  const fontBasename = fontFileName ? fontFileName.replace(/\\.(otf|ttf)$/, '') : postScriptName;\n\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFileName}#${postScriptName}`,\n    android: fontBasename,\n    default: postScriptName,\n  });\n\n  const styleOverrides: TextProps['style'] = {\n    fontFamily: fontReference,\n    fontWeight: 'normal',\n    fontStyle: 'normal',\n  };\n\n  const resolveGlyph = (name: keyof GM) => {\n    const glyph = glyphMap[name];\n\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n\n    return '?';\n  };\n\n  const Icon = ({\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR,\n    style,\n    children,\n    allowFontScaling = false,\n    innerRef,\n    ...props\n  }: IconProps<keyof GM>) => {\n    const [isFontLoaded, setIsFontLoaded] = React.useState(\n      isDynamicLoadingEnabled() ? dynamicLoader.isLoaded(fontReference) : true,\n    );\n    const glyph = isFontLoaded && name ? resolveGlyph(name) : '';\n\n    // biome-ignore lint/correctness/useExhaustiveDependencies: the dependencies never change\n    useEffect(() => {\n      let isMounted = true;\n\n      if (\n        !isFontLoaded &&\n        typeof postScriptNameOrOptions === 'object' &&\n        typeof postScriptNameOrOptions.fontSource !== 'undefined'\n      ) {\n        dynamicLoader.loadFontAsync(fontReference, postScriptNameOrOptions.fontSource).finally(() => {\n          if (isMounted) {\n            setIsFontLoaded(true);\n          }\n        });\n      }\n      return () => {\n        isMounted = false;\n      };\n    }, []);\n\n    const styleDefaults = {\n      fontSize: size,\n      color,\n    };\n\n    const newProps: TextProps = {\n      ...props,\n      style: [styleDefaults, style, styleOverrides, fontStyle || {}],\n      allowFontScaling,\n    };\n\n    return (\n      <Text ref={innerRef} selectable={false} {...newProps}>\n        {glyph}\n        {children}\n      </Text>\n    );\n  };\n\n  const WrappedIcon = forwardRef<Text, IconProps<keyof typeof glyphMap>>((props, ref) => (\n    <Icon innerRef={ref} {...props} />\n  ));\n  WrappedIcon.displayName = `Icon(${postScriptName})`;\n\n  const imageSourceCache = createIconSourceCache();\n\n  const getImageSource: GetImageSourceIconFunc<keyof GM> = async (name, size, color) => {\n    if (typeof postScriptNameOrOptions === 'object' && typeof postScriptNameOrOptions.fontSource !== 'undefined') {\n      await dynamicLoader.loadFontAsync(fontReference, postScriptNameOrOptions.fontSource);\n    }\n    return getImageSourceImpl(imageSourceCache, fontReference, resolveGlyph(name), size, color);\n  };\n\n  const getImageSourceSync: GetImageSourceSyncIconFunc<keyof GM> = (name, size, color) =>\n    getImageSourceSyncImpl(imageSourceCache, fontReference, resolveGlyph(name), size, color);\n\n  const IconNamespace = Object.assign(WrappedIcon, {\n    getImageSource,\n    getImageSourceSync,\n  });\n\n  return IconNamespace;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}