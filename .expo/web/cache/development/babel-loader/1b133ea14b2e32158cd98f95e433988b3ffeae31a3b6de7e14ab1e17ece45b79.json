{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getImageSourceSync = exports.getImageSource = void 0;\nvar _reactNative = require(\"react-native-web/dist/index\");\nvar _defaults = require(\"./defaults.js\");\nvar _getImageLibrary = require(\"./get-image-library.js\");\nvar getImageSourceSync = function getImageSourceSync(imageSourceCache, fontReference, glyph) {\n  var size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _defaults.DEFAULT_ICON_SIZE;\n  var color = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _defaults.DEFAULT_ICON_COLOR;\n  var NativeIconAPI = (0, _getImageLibrary.ensureGetImageAvailable)();\n  var processedColor = (0, _reactNative.processColor)(color);\n  var cacheKey = `${glyph}:${size}:${String(processedColor)}`;\n  var maybeCachedValue = imageSourceCache.get(cacheKey);\n  if (maybeCachedValue !== undefined) {\n    return maybeCachedValue;\n  }\n  try {\n    var imagePath = NativeIconAPI.getImageForFontSync(fontReference, glyph, size, processedColor);\n    var value = {\n      uri: imagePath,\n      scale: _reactNative.PixelRatio.get()\n    };\n    imageSourceCache.setValue(cacheKey, value);\n    return value;\n  } catch (error) {\n    imageSourceCache.setError(cacheKey, error);\n    throw error;\n  }\n};\nexports.getImageSourceSync = getImageSourceSync;\nvar getImageSource = function () {\n  var _ref = _asyncToGenerator(function* (imageSourceCache, fontReference, glyph) {\n    var size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _defaults.DEFAULT_ICON_SIZE;\n    var color = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _defaults.DEFAULT_ICON_COLOR;\n    var NativeIconAPI = (0, _getImageLibrary.ensureGetImageAvailable)();\n    var processedColor = (0, _reactNative.processColor)(color);\n    var cacheKey = `${glyph}:${size}:${String(processedColor)}`;\n    var maybeCachedValue = imageSourceCache.get(cacheKey);\n    if (maybeCachedValue !== undefined) {\n      return maybeCachedValue;\n    }\n    try {\n      var imagePath = yield NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor);\n      var value = {\n        uri: imagePath,\n        scale: _reactNative.PixelRatio.get()\n      };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  });\n  return function getImageSource(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexports.getImageSource = getImageSource;","map":{"version":3,"names":["_defaults","require","_getImageLibrary","getImageSourceSync","imageSourceCache","fontReference","glyph","size","arguments","length","undefined","DEFAULT_ICON_SIZE","color","DEFAULT_ICON_COLOR","NativeIconAPI","ensureGetImageAvailable","processedColor","_reactNative","processColor","cacheKey","String","maybeCachedValue","get","imagePath","getImageForFontSync","value","uri","scale","PixelRatio","setValue","error","setError","exports","getImageSource","_ref","_asyncToGenerator","getImageForFont","_x","_x2","_x3","apply"],"sources":["C:\\Users\\dschi\\OneDrive\\Desktop\\collectible\\node_modules\\@react-native-vector-icons\\common\\src\\get-image-source.ts"],"sourcesContent":["import type { TextStyle } from 'react-native';\nimport { PixelRatio, processColor } from 'react-native';\n\nimport type createIconSourceCache from './create-icon-source-cache';\nimport { DEFAULT_ICON_COLOR, DEFAULT_ICON_SIZE } from './defaults';\nimport { ensureGetImageAvailable } from './get-image-library';\n\nexport const getImageSourceSync = (\n  imageSourceCache: ReturnType<typeof createIconSourceCache>,\n  fontReference: string,\n  glyph: string,\n  size = DEFAULT_ICON_SIZE,\n  color: TextStyle['color'] = DEFAULT_ICON_COLOR,\n) => {\n  const NativeIconAPI = ensureGetImageAvailable();\n\n  const processedColor = processColor(color);\n  const cacheKey = `${glyph}:${size}:${String(processedColor)}`;\n\n  const maybeCachedValue = imageSourceCache.get(cacheKey);\n  if (maybeCachedValue !== undefined) {\n    // FIXME: Should this check if it's an error and throw it again?\n    return maybeCachedValue;\n  }\n\n  try {\n    const imagePath = NativeIconAPI.getImageForFontSync(\n      fontReference,\n      glyph,\n      size,\n      processedColor as number, // FIXME what if a non existent colour was passed in?\n    );\n    const value = { uri: imagePath, scale: PixelRatio.get() };\n    imageSourceCache.setValue(cacheKey, value);\n    return value;\n  } catch (error) {\n    imageSourceCache.setError(cacheKey, error as Error);\n    throw error;\n  }\n};\n\nexport const getImageSource = async (\n  imageSourceCache: ReturnType<typeof createIconSourceCache>,\n  fontReference: string,\n  glyph: string,\n  size = DEFAULT_ICON_SIZE,\n  color: TextStyle['color'] = DEFAULT_ICON_COLOR,\n) => {\n  const NativeIconAPI = ensureGetImageAvailable();\n\n  const processedColor = processColor(color);\n  const cacheKey = `${glyph}:${size}:${String(processedColor)}`;\n\n  const maybeCachedValue = imageSourceCache.get(cacheKey);\n  if (maybeCachedValue !== undefined) {\n    // FIXME: Should this check if it's an error and throw it again?\n    return maybeCachedValue;\n  }\n\n  try {\n    const imagePath = await NativeIconAPI.getImageForFont(\n      fontReference,\n      glyph,\n      size,\n      processedColor as number, // FIXME what if a non existent colour was passed in?\n    );\n    const value = { uri: imagePath, scale: PixelRatio.get() };\n    imageSourceCache.setValue(cacheKey, value);\n    return value;\n  } catch (error) {\n    imageSourceCache.setError(cacheKey, error as Error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}