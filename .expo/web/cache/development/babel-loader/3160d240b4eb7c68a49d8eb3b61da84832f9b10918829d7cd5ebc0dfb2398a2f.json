{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dynamicLoader = void 0;\nvar _reactNative = require(\"react-native-web/dist/index\");\nvar _registry = require(\"@react-native/assets-registry/registry\");\nvar _dynamicLoadingSetting = require(\"./dynamic-loading-setting.js\");\nvar loadPromises = {};\nvar loadFontAsync = function () {\n  var _ref = _asyncToGenerator(function* (fontFamily, fontSource) {\n    var globalRef = globalThis;\n    (0, _dynamicLoadingSetting.assertExpoModulesPresent)(globalRef);\n    var expoModules = globalRef.expo.modules;\n    if (loadPromises[fontFamily]) {\n      return loadPromises[fontFamily];\n    }\n    loadPromises[fontFamily] = function () {\n      var _LoadFont = _asyncToGenerator(function* () {\n        try {\n          var localUri = yield function () {\n            if (typeof fontSource === 'string') {\n              return fontSource;\n            }\n            var _getLocalFontUrl = getLocalFontUrl(fontSource, fontFamily),\n              uri = _getLocalFontUrl.uri,\n              type = _getLocalFontUrl.type,\n              hash = _getLocalFontUrl.hash;\n            return expoModules.ExpoAsset.downloadAsync(uri, hash, type);\n          }();\n          var asset = _reactNative.Platform.select({\n            web: {\n              uri: localUri,\n              display: 'auto'\n            },\n            default: localUri\n          });\n          yield expoModules.ExpoFontLoader.loadAsync(fontFamily, asset);\n        } catch (error) {\n          var _ref2;\n          console.error(`Failed to load font ${fontFamily}`, error);\n          (_ref2 = (0, _dynamicLoadingSetting.getErrorCallback)()) == null ? void 0 : _ref2({\n            error: error,\n            fontFamily: fontFamily,\n            fontSource: fontSource\n          });\n        } finally {\n          delete loadPromises[fontFamily];\n        }\n      });\n      function LoadFont() {\n        return _LoadFont.apply(this, arguments);\n      }\n      return LoadFont;\n    }()();\n    return loadPromises[fontFamily];\n  });\n  return function loadFontAsync(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar getLocalFontUrl = function getLocalFontUrl(fontModuleId, fontFamily) {\n  var assetMeta = (0, _registry.getAssetByID)(fontModuleId);\n  if (!assetMeta) {\n    throw new Error(`no asset found for font family \"${fontFamily}\", moduleId: ${String(fontModuleId)}`);\n  }\n  var assetSource = _reactNative.Image.resolveAssetSource(fontModuleId);\n  return _objectSpread(_objectSpread({}, assetMeta), assetSource);\n};\nvar loadedFontsCache = {};\nvar isLoadedNative = function isLoadedNative(fontFamily) {\n  if (fontFamily in loadedFontsCache) {\n    return true;\n  }\n  var globalRef = globalThis;\n  (0, _dynamicLoadingSetting.assertExpoModulesPresent)(globalRef);\n  var loadedNativeFonts = globalRef.expo.modules.ExpoFontLoader.getLoadedFonts();\n  loadedNativeFonts.forEach(function (font) {\n    loadedFontsCache[font] = true;\n  });\n  return fontFamily in loadedFontsCache;\n};\nvar dynamicLoader = exports.dynamicLoader = {\n  isLoaded: isLoadedNative,\n  loadFontAsync: loadFontAsync\n};","map":{"version":3,"names":["_registry","require","_dynamicLoadingSetting","loadPromises","loadFontAsync","_ref","_asyncToGenerator","fontFamily","fontSource","globalRef","globalThis","assertExpoModulesPresent","expoModules","expo","modules","_LoadFont","localUri","_getLocalFontUrl","getLocalFontUrl","uri","type","hash","ExpoAsset","downloadAsync","asset","_reactNative","Platform","select","web","display","default","ExpoFontLoader","loadAsync","error","_ref2","console","getErrorCallback","LoadFont","apply","arguments","_x","_x2","fontModuleId","assetMeta","getAssetByID","Error","String","assetSource","Image","resolveAssetSource","_objectSpread","loadedFontsCache","isLoadedNative","loadedNativeFonts","getLoadedFonts","forEach","font","dynamicLoader","exports","isLoaded"],"sources":["C:\\Users\\dschi\\OneDrive\\Desktop\\collectible\\node_modules\\@react-native-vector-icons\\common\\src\\dynamicLoading\\dynamic-font-loading.ts"],"sourcesContent":["/*\n * The following imports are always present when react native is installed\n * in the future, more explicit apis will be exposed by the core, including typings\n * */\nimport { Image, Platform } from 'react-native';\n\n// @ts-expect-error missing types\n// eslint-disable-next-line import/no-extraneous-dependencies,import/no-unresolved\nimport { getAssetByID } from '@react-native/assets-registry/registry';\n\nimport { assertExpoModulesPresent, getErrorCallback, type LoadAsyncAsset } from './dynamic-loading-setting';\nimport type { DynamicLoader, FontSource } from './types';\n\nconst loadPromises: { [fontSource: string]: Promise<void> } = {};\n\nconst loadFontAsync = async (fontFamily: string, fontSource: FontSource): Promise<void> => {\n  const globalRef = globalThis;\n  assertExpoModulesPresent(globalRef);\n\n  const expoModules = globalRef.expo.modules;\n\n  if (loadPromises[fontFamily]) {\n    return loadPromises[fontFamily];\n  }\n\n  loadPromises[fontFamily] = (async function LoadFont() {\n    try {\n      const localUri = await (() => {\n        if (typeof fontSource === 'string') {\n          // a local filesystem uri\n          return fontSource;\n        }\n        // a module id\n        const { uri, type, hash } = getLocalFontUrl(fontSource, fontFamily);\n        return expoModules.ExpoAsset.downloadAsync(uri, hash, type);\n      })();\n\n      const asset = Platform.select<LoadAsyncAsset>({\n        web: { uri: localUri, display: 'auto' },\n        default: localUri,\n      });\n      await expoModules.ExpoFontLoader.loadAsync(fontFamily, asset);\n    } catch (error) {\n      console.error(`Failed to load font ${fontFamily}`, error); // eslint-disable-line no-console\n\n      getErrorCallback()?.({\n        error: error as Error,\n        fontFamily,\n        fontSource,\n      });\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n\n  return loadPromises[fontFamily];\n};\n\ntype AssetRegistryEntry = {\n  name: string;\n  httpServerLocation: string;\n  hash: string;\n  type: string; // file extension\n};\n\nconst getLocalFontUrl = (fontModuleId: number, fontFamily: string) => {\n  const assetMeta: AssetRegistryEntry = getAssetByID(fontModuleId);\n  if (!assetMeta) {\n    throw new Error(`no asset found for font family \"${fontFamily}\", moduleId: ${String(fontModuleId)}`);\n  }\n\n  const assetSource = Image.resolveAssetSource(fontModuleId);\n\n  return { ...assetMeta, ...assetSource };\n};\n\nconst loadedFontsCache: { [name: string]: boolean } = {};\n\nconst isLoadedNative = (fontFamily: string) => {\n  if (fontFamily in loadedFontsCache) {\n    return true;\n  }\n  const globalRef = globalThis;\n  assertExpoModulesPresent(globalRef);\n\n  const loadedNativeFonts = globalRef.expo.modules.ExpoFontLoader.getLoadedFonts();\n  loadedNativeFonts.forEach((font) => {\n    loadedFontsCache[font] = true;\n  });\n\n  return fontFamily in loadedFontsCache;\n};\n\nexport const dynamicLoader: DynamicLoader = {\n  isLoaded: isLoadedNative,\n  loadFontAsync,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}