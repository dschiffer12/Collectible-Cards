{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from 'axios';\nvar SCRYFALL_API_BASE = 'https://api.scryfall.com';\nvar POKEMON_TCG_API_BASE = 'https://api.pokemontcg.io/v2';\nvar YUGIOH_API_BASE = 'https://db.ygoprodeck.com/api/v7';\nvar SPORTS_CARD_API_BASE = 'https://www.sportscarddatabase.com/api';\nvar MARVEL_API_BASE = 'https://gateway.marvel.com/v1/public';\nexport var getMTGCardInfo = function () {\n  var _ref = _asyncToGenerator(function* (cardName) {\n    try {\n      var _card$image_uris, _card$image_uris2;\n      var searchResponse = yield axios.get(`${SCRYFALL_API_BASE}/cards/named`, {\n        params: {\n          fuzzy: cardName\n        }\n      });\n      if (!searchResponse.data) {\n        return null;\n      }\n      var card = searchResponse.data;\n      var prices = card.prices;\n      var marketPrice = prices != null && prices.usd ? parseFloat(prices.usd) : prices != null && prices.usd_foil ? parseFloat(prices.usd_foil) : 0;\n      return {\n        name: card.name,\n        set: card.set_name || 'Unknown Set',\n        price: marketPrice,\n        imageUrl: ((_card$image_uris = card.image_uris) == null ? void 0 : _card$image_uris.normal) || ((_card$image_uris2 = card.image_uris) == null ? void 0 : _card$image_uris2.small) || '',\n        rarity: card.rarity,\n        cardNumber: card.collector_number,\n        game: 'mtg'\n      };\n    } catch (error) {\n      console.error('Error getting MTG card info from Scryfall:', error);\n      try {\n        var _searchResponse = yield axios.get(`${SCRYFALL_API_BASE}/cards/search`, {\n          params: {\n            q: `name:\"${cardName}\"`\n          }\n        });\n        if (_searchResponse.data.data && _searchResponse.data.data.length > 0) {\n          var _card$image_uris3, _card$image_uris4;\n          var _card = _searchResponse.data.data[0];\n          var _prices = _card.prices;\n          var _marketPrice = _prices != null && _prices.usd ? parseFloat(_prices.usd) : _prices != null && _prices.usd_foil ? parseFloat(_prices.usd_foil) : 0;\n          return {\n            name: _card.name,\n            set: _card.set_name || 'Unknown Set',\n            price: _marketPrice,\n            imageUrl: ((_card$image_uris3 = _card.image_uris) == null ? void 0 : _card$image_uris3.normal) || ((_card$image_uris4 = _card.image_uris) == null ? void 0 : _card$image_uris4.small) || '',\n            rarity: _card.rarity,\n            cardNumber: _card.collector_number,\n            game: 'mtg'\n          };\n        }\n      } catch (fallbackError) {\n        console.error('Fallback search also failed:', fallbackError);\n      }\n      return null;\n    }\n  });\n  return function getMTGCardInfo(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getPokemonCardInfo = function () {\n  var _ref2 = _asyncToGenerator(function* (cardName) {\n    try {\n      var searchResponse = yield axios.get(`${POKEMON_TCG_API_BASE}/cards`, {\n        params: {\n          q: `name:\"${cardName}\"`,\n          pageSize: 1\n        },\n        headers: {\n          'X-Api-Key': process.env.POKEMON_TCG_API_KEY || ''\n        }\n      });\n      if (searchResponse.data.data && searchResponse.data.data.length > 0) {\n        var _card$cardmarket, _card$images, _card$images2;\n        var card = searchResponse.data.data[0];\n        var prices = (_card$cardmarket = card.cardmarket) == null ? void 0 : _card$cardmarket.prices;\n        var marketPrice = (prices == null ? void 0 : prices.averageSellPrice) || (prices == null ? void 0 : prices.lowPrice) || 0;\n        return {\n          name: card.name,\n          set: card.set.name || 'Unknown Set',\n          price: marketPrice,\n          imageUrl: ((_card$images = card.images) == null ? void 0 : _card$images.large) || ((_card$images2 = card.images) == null ? void 0 : _card$images2.small) || '',\n          rarity: card.rarity,\n          cardNumber: card.number,\n          game: 'pokemon'\n        };\n      }\n      return null;\n    } catch (error) {\n      console.error('Error getting PokÃ©mon card info:', error);\n      return null;\n    }\n  });\n  return function getPokemonCardInfo(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getYuGiOhCardInfo = function () {\n  var _ref3 = _asyncToGenerator(function* (cardName) {\n    try {\n      var searchResponse = yield axios.get(`${YUGIOH_API_BASE}/cardinfo.php`, {\n        params: {\n          fname: cardName\n        }\n      });\n      if (searchResponse.data.data && searchResponse.data.data.length > 0) {\n        var _card$card_prices, _card$card_sets, _card$card_sets$, _card$card_images, _card$card_images$, _card$card_sets2, _card$card_sets2$, _card$card_sets3, _card$card_sets3$;\n        var card = searchResponse.data.data[0];\n        var prices = (_card$card_prices = card.card_prices) == null ? void 0 : _card$card_prices[0];\n        var marketPrice = (prices == null ? void 0 : prices.cardmarket_price) || (prices == null ? void 0 : prices.tcgplayer_price) || 0;\n        return {\n          name: card.name,\n          set: ((_card$card_sets = card.card_sets) == null ? void 0 : (_card$card_sets$ = _card$card_sets[0]) == null ? void 0 : _card$card_sets$.set_name) || 'Unknown Set',\n          price: marketPrice,\n          imageUrl: ((_card$card_images = card.card_images) == null ? void 0 : (_card$card_images$ = _card$card_images[0]) == null ? void 0 : _card$card_images$.image_url) || '',\n          rarity: (_card$card_sets2 = card.card_sets) == null ? void 0 : (_card$card_sets2$ = _card$card_sets2[0]) == null ? void 0 : _card$card_sets2$.set_rarity,\n          cardNumber: (_card$card_sets3 = card.card_sets) == null ? void 0 : (_card$card_sets3$ = _card$card_sets3[0]) == null ? void 0 : _card$card_sets3$.set_code,\n          game: 'yugioh'\n        };\n      }\n      return null;\n    } catch (error) {\n      console.error('Error getting Yu-Gi-Oh! card info:', error);\n      return null;\n    }\n  });\n  return function getYuGiOhCardInfo(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getBaseballCardInfo = function () {\n  var _ref4 = _asyncToGenerator(function* (cardName) {\n    try {\n      var searchResponse = yield axios.get(`${SPORTS_CARD_API_BASE}/search`, {\n        params: {\n          q: cardName,\n          sport: 'baseball',\n          limit: 1\n        }\n      });\n      if (searchResponse.data.results && searchResponse.data.results.length > 0) {\n        var card = searchResponse.data.results[0];\n        return {\n          name: card.player_name || cardName,\n          set: card.set_name || 'Unknown Set',\n          price: card.estimated_value || 0,\n          imageUrl: card.image_url || '',\n          rarity: card.parallel_type || 'Base',\n          cardNumber: card.card_number,\n          game: 'baseball'\n        };\n      }\n      return null;\n    } catch (error) {\n      console.error('Error getting Baseball card info:', error);\n      return null;\n    }\n  });\n  return function getBaseballCardInfo(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getBasketballCardInfo = function () {\n  var _ref5 = _asyncToGenerator(function* (cardName) {\n    try {\n      var searchResponse = yield axios.get(`${SPORTS_CARD_API_BASE}/search`, {\n        params: {\n          q: cardName,\n          sport: 'basketball',\n          limit: 1\n        }\n      });\n      if (searchResponse.data.results && searchResponse.data.results.length > 0) {\n        var card = searchResponse.data.results[0];\n        return {\n          name: card.player_name || cardName,\n          set: card.set_name || 'Unknown Set',\n          price: card.estimated_value || 0,\n          imageUrl: card.image_url || '',\n          rarity: card.parallel_type || 'Base',\n          cardNumber: card.card_number,\n          game: 'basketball'\n        };\n      }\n      return null;\n    } catch (error) {\n      console.error('Error getting Basketball card info:', error);\n      return null;\n    }\n  });\n  return function getBasketballCardInfo(_x5) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var getMarvelCardInfo = function () {\n  var _ref6 = _asyncToGenerator(function* (cardName) {\n    try {\n      var _searchResponse$data$;\n      var searchResponse = yield axios.get(`${MARVEL_API_BASE}/characters`, {\n        params: {\n          name: cardName,\n          apikey: process.env.MARVEL_API_KEY || 'demo',\n          hash: process.env.MARVEL_HASH || 'demo',\n          ts: process.env.MARVEL_TS || '1'\n        }\n      });\n      if ((_searchResponse$data$ = searchResponse.data.data) != null && _searchResponse$data$.results && searchResponse.data.data.results.length > 0) {\n        var _character$id;\n        var character = searchResponse.data.data.results[0];\n        return {\n          name: character.name,\n          set: 'Marvel Comics',\n          price: 0,\n          imageUrl: `${character.thumbnail.path}.${character.thumbnail.extension}`,\n          rarity: 'Common',\n          cardNumber: (_character$id = character.id) == null ? void 0 : _character$id.toString(),\n          game: 'marvel'\n        };\n      }\n      return null;\n    } catch (error) {\n      console.error('Error getting Marvel card info:', error);\n      return null;\n    }\n  });\n  return function getMarvelCardInfo(_x6) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var getCardInfo = function () {\n  var _ref7 = _asyncToGenerator(function* (cardName, gameType) {\n    var game = gameType || 'mtg';\n    switch (game.toLowerCase()) {\n      case 'mtg':\n      case 'magic':\n        return yield getMTGCardInfo(cardName);\n      case 'pokemon':\n        return yield getPokemonCardInfo(cardName);\n      case 'yugioh':\n        return yield getYuGiOhCardInfo(cardName);\n      case 'baseball':\n        return yield getBaseballCardInfo(cardName);\n      case 'basketball':\n        return yield getBasketballCardInfo(cardName);\n      case 'marvel':\n        return yield getMarvelCardInfo(cardName);\n      default:\n        var mtgCard = yield getMTGCardInfo(cardName);\n        if (mtgCard) return mtgCard;\n        var pokemonCard = yield getPokemonCardInfo(cardName);\n        if (pokemonCard) return pokemonCard;\n        var yugiohCard = yield getYuGiOhCardInfo(cardName);\n        if (yugiohCard) return yugiohCard;\n        var baseballCard = yield getBaseballCardInfo(cardName);\n        if (baseballCard) return baseballCard;\n        var basketballCard = yield getBasketballCardInfo(cardName);\n        if (basketballCard) return basketballCard;\n        return yield getMarvelCardInfo(cardName);\n    }\n  });\n  return function getCardInfo(_x7, _x8) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var detectCardGame = function detectCardGame(cardName) {\n  var name = cardName.toLowerCase();\n  if (name.includes('pikachu') || name.includes('charizard') || name.includes('pokemon')) {\n    return 'pokemon';\n  }\n  if (name.includes('blue-eyes') || name.includes('dark magician') || name.includes('exodia')) {\n    return 'yugioh';\n  }\n  if (name.includes('babe ruth') || name.includes('mickey mantle') || name.includes('mike trout') || name.includes('baseball') || name.includes('mlb') || name.includes('topps') || name.includes('bowman')) {\n    return 'baseball';\n  }\n  if (name.includes('michael jordan') || name.includes('lebron james') || name.includes('kobe bryant') || name.includes('basketball') || name.includes('nba') || name.includes('panini') || name.includes('upper deck')) {\n    return 'basketball';\n  }\n  if (name.includes('spider-man') || name.includes('iron man') || name.includes('captain america') || name.includes('thor') || name.includes('hulk') || name.includes('marvel') || name.includes('avengers')) {\n    return 'marvel';\n  }\n  return 'mtg';\n};\nexport var getCardInfoWithDetection = function () {\n  var _ref8 = _asyncToGenerator(function* (cardName) {\n    var detectedGame = detectCardGame(cardName);\n    return yield getCardInfo(cardName, detectedGame);\n  });\n  return function getCardInfoWithDetection(_x9) {\n    return _ref8.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["axios","SCRYFALL_API_BASE","POKEMON_TCG_API_BASE","YUGIOH_API_BASE","SPORTS_CARD_API_BASE","MARVEL_API_BASE","getMTGCardInfo","_ref","_asyncToGenerator","cardName","_card$image_uris","_card$image_uris2","searchResponse","get","params","fuzzy","data","card","prices","marketPrice","usd","parseFloat","usd_foil","name","set","set_name","price","imageUrl","image_uris","normal","small","rarity","cardNumber","collector_number","game","error","console","q","length","_card$image_uris3","_card$image_uris4","fallbackError","_x","apply","arguments","getPokemonCardInfo","_ref2","pageSize","headers","process","env","POKEMON_TCG_API_KEY","_card$cardmarket","_card$images","_card$images2","cardmarket","averageSellPrice","lowPrice","images","large","number","_x2","getYuGiOhCardInfo","_ref3","fname","_card$card_prices","_card$card_sets","_card$card_sets$","_card$card_images","_card$card_images$","_card$card_sets2","_card$card_sets2$","_card$card_sets3","_card$card_sets3$","card_prices","cardmarket_price","tcgplayer_price","card_sets","card_images","image_url","set_rarity","set_code","_x3","getBaseballCardInfo","_ref4","sport","limit","results","player_name","estimated_value","parallel_type","card_number","_x4","getBasketballCardInfo","_ref5","_x5","getMarvelCardInfo","_ref6","_searchResponse$data$","apikey","MARVEL_API_KEY","hash","MARVEL_HASH","ts","MARVEL_TS","_character$id","character","thumbnail","path","extension","id","toString","_x6","getCardInfo","_ref7","gameType","toLowerCase","mtgCard","pokemonCard","yugiohCard","baseballCard","basketballCard","_x7","_x8","detectCardGame","includes","getCardInfoWithDetection","_ref8","detectedGame","_x9"],"sources":["C:/Users/dschi/OneDrive/Desktop/collectible/src/services/cardGameAPIs.ts"],"sourcesContent":["import axios from 'axios';\n\n// API Base URLs\nconst SCRYFALL_API_BASE = 'https://api.scryfall.com';\nconst POKEMON_TCG_API_BASE = 'https://api.pokemontcg.io/v2';\nconst YUGIOH_API_BASE = 'https://db.ygoprodeck.com/api/v7';\nconst SPORTS_CARD_API_BASE = 'https://www.sportscarddatabase.com/api';\nconst MARVEL_API_BASE = 'https://gateway.marvel.com/v1/public';\n\nexport interface CardInfo {\n  name: string;\n  set: string;\n  price: number;\n  imageUrl: string;\n  rarity?: string;\n  cardNumber?: string;\n  game?: string; // 'mtg', 'pokemon', 'yugioh', 'baseball', 'basketball', 'marvel'\n}\n\n// Magic: The Gathering (Scryfall API)\nexport const getMTGCardInfo = async (cardName: string): Promise<CardInfo | null> => {\n  try {\n    // Search for the card using Scryfall's fuzzy search\n    const searchResponse = await axios.get(\n      `${SCRYFALL_API_BASE}/cards/named`,\n      {\n        params: {\n          fuzzy: cardName,\n        },\n      }\n    );\n\n    if (!searchResponse.data) {\n      return null;\n    }\n\n    const card = searchResponse.data;\n    \n    // Get pricing information from Scryfall\n    const prices = card.prices;\n    const marketPrice = prices?.usd ? parseFloat(prices.usd) : \n                       prices?.usd_foil ? parseFloat(prices.usd_foil) : 0;\n\n    return {\n      name: card.name,\n      set: card.set_name || 'Unknown Set',\n      price: marketPrice,\n      imageUrl: card.image_uris?.normal || card.image_uris?.small || '',\n      rarity: card.rarity,\n      cardNumber: card.collector_number,\n      game: 'mtg',\n    };\n  } catch (error) {\n    console.error('Error getting MTG card info from Scryfall:', error);\n    \n    // Fallback: try alternative search methods\n    try {\n      const searchResponse = await axios.get(\n        `${SCRYFALL_API_BASE}/cards/search`,\n        {\n          params: {\n            q: `name:\"${cardName}\"`,\n          },\n        }\n      );\n\n      if (searchResponse.data.data && searchResponse.data.data.length > 0) {\n        const card = searchResponse.data.data[0];\n        const prices = card.prices;\n        const marketPrice = prices?.usd ? parseFloat(prices.usd) : \n                           prices?.usd_foil ? parseFloat(prices.usd_foil) : 0;\n\n        return {\n          name: card.name,\n          set: card.set_name || 'Unknown Set',\n          price: marketPrice,\n          imageUrl: card.image_uris?.normal || card.image_uris?.small || '',\n          rarity: card.rarity,\n          cardNumber: card.collector_number,\n          game: 'mtg',\n        };\n      }\n    } catch (fallbackError) {\n      console.error('Fallback search also failed:', fallbackError);\n    }\n    \n    return null;\n  }\n};\n\n// PokÃ©mon TCG API\nexport const getPokemonCardInfo = async (cardName: string): Promise<CardInfo | null> => {\n  try {\n    const searchResponse = await axios.get(\n      `${POKEMON_TCG_API_BASE}/cards`,\n      {\n        params: {\n          q: `name:\"${cardName}\"`,\n          pageSize: 1,\n        },\n        headers: {\n          'X-Api-Key': process.env.POKEMON_TCG_API_KEY || '', // Optional\n        },\n      }\n    );\n\n    if (searchResponse.data.data && searchResponse.data.data.length > 0) {\n      const card = searchResponse.data.data[0];\n      const prices = card.cardmarket?.prices;\n      const marketPrice = prices?.averageSellPrice || prices?.lowPrice || 0;\n\n      return {\n        name: card.name,\n        set: card.set.name || 'Unknown Set',\n        price: marketPrice,\n        imageUrl: card.images?.large || card.images?.small || '',\n        rarity: card.rarity,\n        cardNumber: card.number,\n        game: 'pokemon',\n      };\n    }\n    return null;\n  } catch (error) {\n    console.error('Error getting PokÃ©mon card info:', error);\n    return null;\n  }\n};\n\n// Yu-Gi-Oh! API\nexport const getYuGiOhCardInfo = async (cardName: string): Promise<CardInfo | null> => {\n  try {\n    const searchResponse = await axios.get(\n      `${YUGIOH_API_BASE}/cardinfo.php`,\n      {\n        params: {\n          fname: cardName,\n        },\n      }\n    );\n\n    if (searchResponse.data.data && searchResponse.data.data.length > 0) {\n      const card = searchResponse.data.data[0];\n      const prices = card.card_prices?.[0];\n      const marketPrice = prices?.cardmarket_price || prices?.tcgplayer_price || 0;\n\n      return {\n        name: card.name,\n        set: card.card_sets?.[0]?.set_name || 'Unknown Set',\n        price: marketPrice,\n        imageUrl: card.card_images?.[0]?.image_url || '',\n        rarity: card.card_sets?.[0]?.set_rarity,\n        cardNumber: card.card_sets?.[0]?.set_code,\n        game: 'yugioh',\n      };\n    }\n    return null;\n  } catch (error) {\n    console.error('Error getting Yu-Gi-Oh! card info:', error);\n    return null;\n  }\n};\n\n// Baseball Cards API (Sports Card Database)\nexport const getBaseballCardInfo = async (cardName: string): Promise<CardInfo | null> => {\n  try {\n    const searchResponse = await axios.get(\n      `${SPORTS_CARD_API_BASE}/search`,\n      {\n        params: {\n          q: cardName,\n          sport: 'baseball',\n          limit: 1,\n        },\n      }\n    );\n\n    if (searchResponse.data.results && searchResponse.data.results.length > 0) {\n      const card = searchResponse.data.results[0];\n      \n      return {\n        name: card.player_name || cardName,\n        set: card.set_name || 'Unknown Set',\n        price: card.estimated_value || 0,\n        imageUrl: card.image_url || '',\n        rarity: card.parallel_type || 'Base',\n        cardNumber: card.card_number,\n        game: 'baseball',\n      };\n    }\n    return null;\n  } catch (error) {\n    console.error('Error getting Baseball card info:', error);\n    return null;\n  }\n};\n\n// Basketball Cards API (Sports Card Database)\nexport const getBasketballCardInfo = async (cardName: string): Promise<CardInfo | null> => {\n  try {\n    const searchResponse = await axios.get(\n      `${SPORTS_CARD_API_BASE}/search`,\n      {\n        params: {\n          q: cardName,\n          sport: 'basketball',\n          limit: 1,\n        },\n      }\n    );\n\n    if (searchResponse.data.results && searchResponse.data.results.length > 0) {\n      const card = searchResponse.data.results[0];\n      \n      return {\n        name: card.player_name || cardName,\n        set: card.set_name || 'Unknown Set',\n        price: card.estimated_value || 0,\n        imageUrl: card.image_url || '',\n        rarity: card.parallel_type || 'Base',\n        cardNumber: card.card_number,\n        game: 'basketball',\n      };\n    }\n    return null;\n  } catch (error) {\n    console.error('Error getting Basketball card info:', error);\n    return null;\n  }\n};\n\n// Marvel Cards API (Marvel Comics API)\nexport const getMarvelCardInfo = async (cardName: string): Promise<CardInfo | null> => {\n  try {\n    const searchResponse = await axios.get(\n      `${MARVEL_API_BASE}/characters`,\n      {\n        params: {\n          name: cardName,\n          apikey: process.env.MARVEL_API_KEY || 'demo',\n          hash: process.env.MARVEL_HASH || 'demo',\n          ts: process.env.MARVEL_TS || '1',\n        },\n      }\n    );\n\n    if (searchResponse.data.data?.results && searchResponse.data.data.results.length > 0) {\n      const character = searchResponse.data.data.results[0];\n      \n      return {\n        name: character.name,\n        set: 'Marvel Comics',\n        price: 0, // Marvel API doesn't provide pricing\n        imageUrl: `${character.thumbnail.path}.${character.thumbnail.extension}`,\n        rarity: 'Common',\n        cardNumber: character.id?.toString(),\n        game: 'marvel',\n      };\n    }\n    return null;\n  } catch (error) {\n    console.error('Error getting Marvel card info:', error);\n    return null;\n  }\n};\n\n// Main function to get card info from multiple APIs\nexport const getCardInfo = async (cardName: string, gameType?: string): Promise<CardInfo | null> => {\n  // Try different APIs based on game type or fallback to Magic: The Gathering\n  const game = gameType || 'mtg';\n  \n  switch (game.toLowerCase()) {\n    case 'mtg':\n    case 'magic':\n      return await getMTGCardInfo(cardName);\n    case 'pokemon':\n      return await getPokemonCardInfo(cardName);\n    case 'yugioh':\n      return await getYuGiOhCardInfo(cardName);\n    case 'baseball':\n      return await getBaseballCardInfo(cardName);\n    case 'basketball':\n      return await getBasketballCardInfo(cardName);\n    case 'marvel':\n      return await getMarvelCardInfo(cardName);\n    default:\n      // Try all APIs in order of preference\n      const mtgCard = await getMTGCardInfo(cardName);\n      if (mtgCard) return mtgCard;\n      \n      const pokemonCard = await getPokemonCardInfo(cardName);\n      if (pokemonCard) return pokemonCard;\n      \n      const yugiohCard = await getYuGiOhCardInfo(cardName);\n      if (yugiohCard) return yugiohCard;\n      \n      const baseballCard = await getBaseballCardInfo(cardName);\n      if (baseballCard) return baseballCard;\n      \n      const basketballCard = await getBasketballCardInfo(cardName);\n      if (basketballCard) return basketballCard;\n      \n      return await getMarvelCardInfo(cardName);\n  }\n};\n\n// Utility function to detect card game type from card name patterns\nexport const detectCardGame = (cardName: string): string => {\n  const name = cardName.toLowerCase();\n  \n  // PokÃ©mon patterns\n  if (name.includes('pikachu') || name.includes('charizard') || name.includes('pokemon')) {\n    return 'pokemon';\n  }\n  \n  // Yu-Gi-Oh! patterns\n  if (name.includes('blue-eyes') || name.includes('dark magician') || name.includes('exodia')) {\n    return 'yugioh';\n  }\n  \n  // Baseball patterns\n  if (name.includes('babe ruth') || name.includes('mickey mantle') || name.includes('mike trout') || \n      name.includes('baseball') || name.includes('mlb') || name.includes('topps') || name.includes('bowman')) {\n    return 'baseball';\n  }\n  \n  // Basketball patterns\n  if (name.includes('michael jordan') || name.includes('lebron james') || name.includes('kobe bryant') || \n      name.includes('basketball') || name.includes('nba') || name.includes('panini') || name.includes('upper deck')) {\n    return 'basketball';\n  }\n  \n  // Marvel patterns\n  if (name.includes('spider-man') || name.includes('iron man') || name.includes('captain america') || \n      name.includes('thor') || name.includes('hulk') || name.includes('marvel') || name.includes('avengers')) {\n    return 'marvel';\n  }\n  \n  // Default to Magic: The Gathering\n  return 'mtg';\n};\n\n// Get card info with automatic game detection\nexport const getCardInfoWithDetection = async (cardName: string): Promise<CardInfo | null> => {\n  const detectedGame = detectCardGame(cardName);\n  return await getCardInfo(cardName, detectedGame);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}