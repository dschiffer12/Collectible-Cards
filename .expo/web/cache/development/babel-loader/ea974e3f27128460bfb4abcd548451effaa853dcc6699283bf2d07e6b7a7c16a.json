{"ast":null,"code":"\"use strict\";\n\nvar _globalThis$expo, _globalThis$expo$modu, _globalThis$expo2, _globalThis$expo2$mod;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertExpoModulesPresent = assertExpoModulesPresent;\nexports.getErrorCallback = void 0;\nexports.getIsRenderToImageSupported = getIsRenderToImageSupported;\nexports.setDynamicLoadingErrorCallback = exports.setDynamicLoadingEnabled = exports.isDynamicLoadingSupported = exports.isDynamicLoadingEnabled = void 0;\nvar _reactNative = require(\"react-native-web/dist/index\");\nfunction getIsDynamicLoadingSupported(globalObj) {\n  var _globalObj$expo$modul, _globalObj$expo$modul2, _globalObj$expo$modul3, _globalObj$expo$modul4, _globalObj$expo$modul5, _globalObj$expo$modul6;\n  return (globalObj == null ? void 0 : globalObj.expo) && (_reactNative.Platform.OS === 'web' || typeof ((_globalObj$expo$modul = globalObj.expo.modules) == null ? void 0 : (_globalObj$expo$modul2 = _globalObj$expo$modul.ExpoAsset) == null ? void 0 : _globalObj$expo$modul2.downloadAsync) === 'function') && typeof ((_globalObj$expo$modul3 = globalObj.expo.modules) == null ? void 0 : (_globalObj$expo$modul4 = _globalObj$expo$modul3.ExpoFontLoader) == null ? void 0 : _globalObj$expo$modul4.getLoadedFonts) === 'function' && typeof ((_globalObj$expo$modul5 = globalObj.expo.modules) == null ? void 0 : (_globalObj$expo$modul6 = _globalObj$expo$modul5.ExpoFontLoader) == null ? void 0 : _globalObj$expo$modul6.loadAsync) === 'function';\n}\nfunction getIsRenderToImageSupported(globalObj) {\n  var _globalObj$expo$modul7, _globalObj$expo$modul8;\n  return (globalObj == null ? void 0 : globalObj.expo) && typeof ((_globalObj$expo$modul7 = globalObj.expo.modules) == null ? void 0 : (_globalObj$expo$modul8 = _globalObj$expo$modul7.ExpoFontUtils) == null ? void 0 : _globalObj$expo$modul8.renderToImageAsync) === 'function';\n}\nfunction assertExpoModulesPresent(globalObj) {\n  if (!getIsDynamicLoadingSupported(globalObj)) {\n    throw new Error('Dynamic font loading not supported. Upgrade to latest expo and expo-font.');\n  }\n}\nvar hasNecessaryExpoModules = (_reactNative.Platform.OS === 'web' || !!((_globalThis$expo = globalThis.expo) != null && (_globalThis$expo$modu = _globalThis$expo.modules) != null && _globalThis$expo$modu.ExpoAsset)) && !!((_globalThis$expo2 = globalThis.expo) != null && (_globalThis$expo2$mod = _globalThis$expo2.modules) != null && _globalThis$expo2$mod.ExpoFontLoader);\nvar hasNecessaryExpoFeatures = getIsDynamicLoadingSupported(globalThis);\nvar dynamicFontLoadingEnabled = hasNecessaryExpoFeatures;\nvar isDynamicLoadingSupported = function isDynamicLoadingSupported() {\n  return hasNecessaryExpoFeatures;\n};\nexports.isDynamicLoadingSupported = isDynamicLoadingSupported;\nvar setDynamicLoadingEnabled = function setDynamicLoadingEnabled(value) {\n  if (!hasNecessaryExpoFeatures) {\n    if (process.env.NODE_ENV !== 'production' && !!value) {\n      var message = hasNecessaryExpoModules ? 'Expo is installed, but does not support dynamic font loading. Make sure to use Expo SDK 54 or newer.' : 'Necessary Expo modules not found. Dynamic font loading is not available when necessary Expo modules are not present.';\n      console.error(message);\n    }\n    return false;\n  }\n  dynamicFontLoadingEnabled = !!value;\n  return true;\n};\nexports.setDynamicLoadingEnabled = setDynamicLoadingEnabled;\nvar isDynamicLoadingEnabled = function isDynamicLoadingEnabled() {\n  return dynamicFontLoadingEnabled;\n};\nexports.isDynamicLoadingEnabled = isDynamicLoadingEnabled;\nvar dynamicLoadingErrorCallback;\nvar setDynamicLoadingErrorCallback = function setDynamicLoadingErrorCallback(callback) {\n  dynamicLoadingErrorCallback = callback;\n};\nexports.setDynamicLoadingErrorCallback = setDynamicLoadingErrorCallback;\nvar getErrorCallback = function getErrorCallback() {\n  return dynamicLoadingErrorCallback;\n};\nexports.getErrorCallback = getErrorCallback;","map":{"version":3,"names":["getIsDynamicLoadingSupported","globalObj","_globalObj$expo$modul","_globalObj$expo$modul2","_globalObj$expo$modul3","_globalObj$expo$modul4","_globalObj$expo$modul5","_globalObj$expo$modul6","expo","_reactNative","Platform","OS","modules","ExpoAsset","downloadAsync","ExpoFontLoader","getLoadedFonts","loadAsync","getIsRenderToImageSupported","_globalObj$expo$modul7","_globalObj$expo$modul8","ExpoFontUtils","renderToImageAsync","assertExpoModulesPresent","Error","hasNecessaryExpoModules","_globalThis$expo","globalThis","_globalThis$expo$modu","_globalThis$expo2","_globalThis$expo2$mod","hasNecessaryExpoFeatures","dynamicFontLoadingEnabled","isDynamicLoadingSupported","exports","setDynamicLoadingEnabled","value","process","env","NODE_ENV","message","console","error","isDynamicLoadingEnabled","dynamicLoadingErrorCallback","setDynamicLoadingErrorCallback","callback","getErrorCallback"],"sources":["C:\\Users\\dschi\\OneDrive\\Desktop\\collectible\\node_modules\\@react-native-vector-icons\\common\\src\\dynamicLoading\\dynamic-loading-setting.ts"],"sourcesContent":["import { Platform } from 'react-native';\n\nimport type { FontSource } from './types';\n\ntype ExpoAssetModule = {\n  // definition from\n  // https://github.com/expo/expo/blob/1f5a5991d14aad09282d1ce1612b44d30e7e7d3d/packages/expo-asset/ios/AssetModule.swift#L23\n  downloadAsync: (uri: string, hash: string | undefined, type: string) => Promise<string>;\n};\n\n// this is a file:// uri on native, or an object with uri and display on web\nexport type LoadAsyncAsset = string | { uri: string; display: string };\n\ntype ExpoFontLoaderModule = {\n  // definition from\n  // https://github.com/expo/expo/blob/1f5a5991d14aad09282d1ce1612b44d30e7e7d3d/packages/expo-font/ios/FontLoaderModule.swift#L18\n  getLoadedFonts: () => string[];\n  loadAsync: (fontFamilyAlias: string, asset: LoadAsyncAsset) => Promise<void>;\n};\n\ntype ExpoFontUtilsModule = {\n  renderToImageAsync: (\n    glyph: string,\n    options: {\n      fontFamily?: string;\n      size?: number;\n      color?: number;\n    },\n  ) => Promise<string>;\n};\n\ndeclare global {\n  interface ExpoGlobal {\n    modules: {\n      ExpoAsset?: ExpoAssetModule;\n      ExpoFontLoader?: ExpoFontLoaderModule;\n      ExpoFontUtils?: ExpoFontUtilsModule;\n    };\n  }\n\n  // eslint-disable-next-line vars-on-top\n  var expo: ExpoGlobal | undefined;\n}\n\ntype ExpoGlobalType = {\n  modules: {\n    ExpoAsset: ExpoAssetModule;\n    ExpoFontLoader: ExpoFontLoaderModule;\n  };\n};\n\n// biome-ignore lint/suspicious/noExplicitAny: this is used internally with globalThis\nfunction getIsDynamicLoadingSupported(globalObj: any): globalObj is {\n  expo: ExpoGlobalType;\n} {\n  return (\n    globalObj?.expo &&\n    (Platform.OS === 'web' || typeof globalObj.expo.modules?.ExpoAsset?.downloadAsync === 'function') &&\n    typeof globalObj.expo.modules?.ExpoFontLoader?.getLoadedFonts === 'function' &&\n    typeof globalObj.expo.modules?.ExpoFontLoader?.loadAsync === 'function'\n  );\n}\n\n// biome-ignore lint/suspicious/noExplicitAny: this is used internally with globalThis\nexport function getIsRenderToImageSupported(globalObj: any): globalObj is {\n  expo: {\n    modules: {\n      ExpoFontUtils: ExpoFontUtilsModule;\n    };\n  };\n} {\n  return globalObj?.expo && typeof globalObj.expo.modules?.ExpoFontUtils?.renderToImageAsync === 'function';\n}\n\nexport function assertExpoModulesPresent(globalObj: unknown): asserts globalObj is { expo: ExpoGlobalType } {\n  if (!getIsDynamicLoadingSupported(globalObj)) {\n    throw new Error('Dynamic font loading not supported. Upgrade to latest expo and expo-font.');\n  }\n}\n\nconst hasNecessaryExpoModules =\n  (Platform.OS === 'web' || !!globalThis.expo?.modules?.ExpoAsset) && !!globalThis.expo?.modules?.ExpoFontLoader;\n\nconst hasNecessaryExpoFeatures = getIsDynamicLoadingSupported(globalThis);\n\nlet dynamicFontLoadingEnabled = hasNecessaryExpoFeatures;\n\nexport const isDynamicLoadingSupported = () => hasNecessaryExpoFeatures;\n\n/**\n * Set whether dynamic loading of fonts is enabled.\n * Currently, the presence of Expo Asset and Font Loader modules is a prerequisite for enabling.\n * In the future, React Native core apis will be used for dynamic font loading.\n *\n * @param value - whether dynamic loading of fonts is enabled\n * @returns `true` if dynamic loading of fonts was successfully set. `false` otherwise.\n * */\nexport const setDynamicLoadingEnabled = (value: boolean): boolean => {\n  if (!hasNecessaryExpoFeatures) {\n    if (process.env.NODE_ENV !== 'production' && !!value) {\n      const message = hasNecessaryExpoModules\n        ? 'Expo is installed, but does not support dynamic font loading. Make sure to use Expo SDK 54 or newer.'\n        : 'Necessary Expo modules not found. Dynamic font loading is not available when necessary Expo modules are not present.';\n      console.error(message); // eslint-disable-line no-console\n    }\n    return false;\n  }\n\n  dynamicFontLoadingEnabled = !!value;\n\n  return true;\n};\n\n/**\n * Whether dynamic loading of fonts is enabled.\n * */\nexport const isDynamicLoadingEnabled = () => dynamicFontLoadingEnabled;\n\ntype ErrorCallback = (args: { error: Error; fontFamily: string; fontSource: FontSource }) => void;\n\nlet dynamicLoadingErrorCallback: undefined | ErrorCallback;\n\n/**\n * Set a callback to be called when an error occurs during dynamic font loading.\n * */\nexport const setDynamicLoadingErrorCallback = (callback: ErrorCallback) => {\n  dynamicLoadingErrorCallback = callback;\n};\n\nexport const getErrorCallback = () => dynamicLoadingErrorCallback;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}